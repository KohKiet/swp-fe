
// Import c√°c th∆∞ vi·ªán c·∫ßn thi·∫øt
import React, { useEffect, useState } from 'react'; // React core v√† c√°c hook
import surveyService from '../../services/surveyService'; // Service g·ªçi API kh·∫£o s√°t
import { useNavigate } from 'react-router-dom'; // D√πng ƒë·ªÉ chuy·ªÉn trang
import './styles/survey.css'; // Import CSS cho giao di·ªán kh·∫£o s√°t


// Component cho ph√©p ng∆∞·ªùi d√πng l√†m b√†i kh·∫£o s√°t
const TakeSurveyPage = () => {
  // State l∆∞u th√¥ng tin kh·∫£o s√°t hi·ªán t·∫°i
  const [survey, setSurvey] = useState(null);
  // State l∆∞u ƒë√°p √°n c·ªßa t·ª´ng c√¢u h·ªèi
  const [answers, setAnswers] = useState([]);
  // State ch·ªâ s·ªë c√¢u h·ªèi hi·ªán t·∫°i ƒëang hi·ªÉn th·ªã
  const [current, setCurrent] = useState(0);
  // State ki·ªÉm so√°t tr·∫°ng th√°i loading khi l·∫•y d·ªØ li·ªáu
  const [loading, setLoading] = useState(true);
  // State ki·ªÉm so√°t tr·∫°ng th√°i ƒëang g·ª≠i b√†i
  const [submitting, setSubmitting] = useState(false);
  // State l∆∞u th√¥ng b√°o l·ªói n·∫øu c√≥ l·ªói
  const [error, setError] = useState(null);
  // Hook ƒë·ªÉ chuy·ªÉn trang
  const navigate = useNavigate();


  // Khi component mount, ki·ªÉm tra xem c√≥ l∆∞u ti·∫øn tr√¨nh kh·∫£o s√°t trong localStorage kh√¥ng
  // N·∫øu c√≥ th√¨ load l·∫°i, n·∫øu kh√¥ng th√¨ g·ªçi API l·∫•y kh·∫£o s√°t ph√π h·ª£p
  useEffect(() => {
    const saved = localStorage.getItem('survey_progress');
    if (saved) {
      const { survey, answers, current } = JSON.parse(saved);
      setSurvey(survey);
      setAnswers(answers);
      setCurrent(current);
      setLoading(false);
      return;
    }
    // G·ªçi API l·∫•y kh·∫£o s√°t ph√π h·ª£p cho ng∆∞·ªùi d√πng
    surveyService.getSuitableSurvey()
      .then(data => {
        setSurvey(data);
        // Kh·ªüi t·∫°o m·∫£ng ƒë√°p √°n r·ªóng cho t·ª´ng c√¢u h·ªèi
        setAnswers(data.questions.map(q => ({ questionId: q.questionId, selectedAnswerId: null })));
      })
      .catch(() => setError('Kh√¥ng th·ªÉ t·∫£i kh·∫£o s√°t'))
      .finally(() => setLoading(false));
  }, []);


  // M·ªói khi survey, answers ho·∫∑c current thay ƒë·ªïi, l∆∞u ti·∫øn tr√¨nh v√†o localStorage ƒë·ªÉ ng∆∞·ªùi d√πng c√≥ th·ªÉ ti·∫øp t·ª•c n·∫øu reload
  useEffect(() => {
    if (survey && answers.length) {
      localStorage.setItem('survey_progress', JSON.stringify({ survey, answers, current }));
    }
  }, [survey, answers, current]);


  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ch·ªçn ƒë√°p √°n cho c√¢u h·ªèi hi·ªán t·∫°i
  const handleAnswer = (answerId) => {
    setAnswers(prev => prev.map((a, idx) => idx === current ? { ...a, selectedAnswerId: answerId } : a));
  };


  // X·ª≠ l√Ω khi ng∆∞·ªùi d√πng nh·∫•n n√∫t "N·ªôp b√†i"
  const handleSubmit = async () => {
    // Ki·ªÉm tra ƒë√£ tr·∫£ l·ªùi h·∫øt t·∫•t c·∫£ c√¢u h·ªèi ch∆∞a
    if (answers.some(a => !a.selectedAnswerId)) {
      setError('Vui l√≤ng tr·∫£ l·ªùi t·∫•t c·∫£ c√¢u h·ªèi');
      return;
    }
    setSubmitting(true);
    try {
      // G·ª≠i ƒë√°p √°n l√™n server
      const result = await surveyService.submitSurvey(survey.surveyId, answers);
      // X√≥a ti·∫øn tr√¨nh kh·∫£o s√°t ƒë√£ l∆∞u
      localStorage.removeItem('survey_progress');
      // Chuy·ªÉn sang trang k·∫øt qu·∫£ v√† truy·ªÅn k·∫øt qu·∫£ qua state
      navigate('/surveys/results', { state: { result } });
    } catch (e) {
      setError(e.response?.data?.message || 'L·ªói khi n·ªôp kh·∫£o s√°t');
    } finally {
      setSubmitting(false);
    }
  };

  // N·∫øu ƒëang loading, hi·ªÉn th·ªã giao di·ªán ch·ªù
  if (loading) return (
    <div>
      <div className="survey-banner">
        <div className="survey-banner-content">
          <h1 className="survey-banner-title">L√†m B√†i Kh·∫£o S√°t</h1>
          <p className="survey-banner-subtitle">H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi d∆∞·ªõi ƒë√¢y m·ªôt c√°ch ch√¢n th·ª±c nh·∫•t</p>
        </div>
      </div>
      <div className="survey-root">
        <div className="survey-container">
          <div className="survey-title" style={{justifyContent:'center'}}>
            <span role="img" aria-label="survey">üìù</span> ƒêang t·∫£i c√¢u h·ªèi...
          </div>
          <div style={{marginTop: 24}}>
            <div className="survey-progress">
              <div className="survey-progress-bar" style={{width:'40%'}}></div>
            </div>
            <div className="survey-question" style={{opacity:0.5}}>
              <div className="survey-answer" style={{width:'80%',margin:'8px auto',height:32,background:'#f3f4f6'}}></div>
              <div className="survey-answer" style={{width:'60%',margin:'8px auto',height:32,background:'#f3f4f6'}}></div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
  
  // N·∫øu c√≥ l·ªói khi l·∫•y d·ªØ li·ªáu ho·∫∑c n·ªôp b√†i, hi·ªÉn th·ªã th√¥ng b√°o l·ªói
  if (error) return (
    <div>
      <div className="survey-banner">
        <div className="survey-banner-content">
          <h1 className="survey-banner-title">L√†m B√†i Kh·∫£o S√°t</h1>
          <p className="survey-banner-subtitle">H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi d∆∞·ªõi ƒë√¢y m·ªôt c√°ch ch√¢n th·ª±c nh·∫•t</p>
        </div>
      </div>
      <div className="survey-root">
        <div className="survey-container survey-alert">{error}</div>
      </div>
    </div>
  );
  // N·∫øu ch∆∞a c√≥ d·ªØ li·ªáu kh·∫£o s√°t, kh√¥ng render g√¨
  if (!survey) return null;

  // L·∫•y th√¥ng tin c√¢u h·ªèi hi·ªán t·∫°i, t·ªïng s·ªë c√¢u h·ªèi, s·ªë c√¢u ƒë√£ tr·∫£ l·ªùi v√† ph·∫ßn trƒÉm ti·∫øn tr√¨nh
  const q = survey.questions[current];
  const total = survey.questions.length;
  const answered = answers.filter(a => a.selectedAnswerId).length;
  const progress = Math.round((answered / total) * 100);

  // Hi·ªÉn th·ªã giao di·ªán l√†m kh·∫£o s√°t
  return (
    <div>
      {/* Banner ti√™u ƒë·ªÅ trang */}
      <div className="survey-banner">
        <div className="survey-banner-content">
          <h1 className="survey-banner-title">L√†m B√†i Kh·∫£o S√°t</h1>
          <p className="survey-banner-subtitle">H√£y tr·∫£ l·ªùi c√°c c√¢u h·ªèi d∆∞·ªõi ƒë√¢y m·ªôt c√°ch ch√¢n th·ª±c nh·∫•t</p>
        </div>
      </div>
      
      <div className="survey-root">
        <div className="survey-container">
          {/* Ti√™u ƒë·ªÅ kh·∫£o s√°t */}
          <div className="survey-title">
            <span role="img" aria-label="survey">üìù</span> {survey.title}
          </div>
          {/* M√¥ t·∫£ kh·∫£o s√°t */}
          <div className="survey-desc">{survey.description}</div>
          {/* Thanh ti·∫øn tr√¨nh kh·∫£o s√°t */}
          <div className="survey-progress" aria-label="Ti·∫øn tr√¨nh kh·∫£o s√°t">
            <div className="survey-progress-bar" style={{width: progress + '%'}}></div>
          </div>
          {/* Hi·ªÉn th·ªã c√¢u h·ªèi hi·ªán t·∫°i */}
          <div className="survey-question">{q.content}</div>
          {/* Hi·ªÉn th·ªã c√°c ƒë√°p √°n cho c√¢u h·ªèi hi·ªán t·∫°i */}
          <div className="survey-answers">
            {q.answers.map(ans => (
              <label key={ans.answerId} className={
                'survey-answer' + (answers[current].selectedAnswerId === ans.answerId ? ' selected' : '')
              }>
                <input
                  type="radio"
                  checked={answers[current].selectedAnswerId === ans.answerId}
                  onChange={() => handleAnswer(ans.answerId)}
                  disabled={submitting}
                  aria-label={ans.answerText}
                />
                {ans.answerText}
              </label>
            ))}
          </div>
          {/* C√°c n√∫t ƒëi·ªÅu h∆∞·ªõng c√¢u h·ªèi v√† n·ªôp b√†i */}
          <div className="survey-nav">
            {/* N√∫t quay l·∫°i c√¢u tr∆∞·ªõc */}
            {current > 0 && <button className="survey-btn" onClick={() => setCurrent(c => c - 1)}>Tr∆∞·ªõc</button>}
            {/* N√∫t sang c√¢u ti·∫øp theo ho·∫∑c n·ªôp b√†i */}
            {current < survey.questions.length - 1 ? (
              <button className="survey-btn" onClick={() => setCurrent(c => c + 1)} disabled={!answers[current].selectedAnswerId}>Ti·∫øp</button>
            ) : (
              <button
                className="survey-btn"
                onClick={handleSubmit}
                disabled={submitting || !answers[current].selectedAnswerId}
              >
                {submitting ? 'ƒêang g·ª≠i...' : 'N·ªôp b√†i'}
              </button>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

// Export component ƒë·ªÉ s·ª≠ d·ª•ng ·ªü n∆°i kh√°c
export default TakeSurveyPage;
